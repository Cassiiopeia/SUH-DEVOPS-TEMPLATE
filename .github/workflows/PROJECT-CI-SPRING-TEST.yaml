# ===================================================================
# 스프링부트 프로젝트 빌드 테스트 워크플로우
# ===================================================================
#
# 이 워크플로우는 PR이 test 브랜치로 생성될 때 Spring Boot 프로젝트 빌드를 
# 테스트하고 결과를 PR에 댓글로 작성합니다.
#
# 사용 방법:
# 1. 이 파일을 .github/workflows/ 디렉토리에 저장하세요.
# 2. 필요한 GitHub Secrets를 설정하세요.
# 3. 필요시 브랜치 조건이나 Java 버전을 수정하세요.
#
# 필수 GitHub Secrets:
# - APPLICATION_PROD_YML: application-prod.yml 파일 내용
# - VERTEX_SA_KEY: (선택) 서비스 계정 키 파일 내용
#
# ===================================================================

name: 스프링부트 빌드 테스트

on:
  pull_request:
    branches: ["test"]  # 필요시 브랜치명 수정

# PR 댓글을 위한 권한 추가
permissions:
  contents: read
  pull-requests: write

jobs:
  test-project-build:
    name: 스프링부트 빌드 테스트
    runs-on: ubuntu-latest

    steps:
      - name: 소스코드 체크아웃
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Java 설정
        id: setup-java
        uses: actions/setup-java@v4
        with:
          java-version: 17  # 프로젝트에 맞는 Java 버전 설정
          distribution: temurin
          cache: gradle

      - name: Gradle 실행 권한 설정
        id: setup-gradle
        run: chmod +x gradlew

      - name: 환경 설정 파일 생성
        id: create-config
        run: |
          # 설정 파일 디렉토리 생성
          mkdir -p src/main/resources
          
          # application-prod.yml 파일 생성
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./src/main/resources/application-prod.yml
          echo "application-prod.yml 파일 생성됨 (크기: $(stat -c%s ./src/main/resources/application-prod.yml) 바이트)"
          
          # 서비스 계정 키 파일 생성 (선택 사항)
          if [ ! -z "${{ secrets.VERTEX_SA_KEY }}" ]; then
            echo "${{ secrets.VERTEX_SA_KEY }}" | sed 's/\\n/\n/g' > ./src/main/resources/service-account-key.json
            echo "서비스 계정 키 파일 생성됨 (크기: $(stat -c%s ./src/main/resources/service-account-key.json) 바이트)"
          fi
          
          # 생성된 파일 목록 확인
          echo "생성된 설정 파일 목록:"
          ls -la ./src/main/resources/

      - name: 프로젝트 빌드
        id: build-project
        run: |
          # 빌드 결과를 파일로 저장
          ./gradlew clean build -x test -Dspring.profiles.active=prod > build_output.txt 2>&1 || {
            echo "BUILD_FAILED=true" >> $GITHUB_ENV
            echo "BUILD_OUTPUT<<EOF" >> $GITHUB_ENV
            # 에러 메시지 중 중요한 부분만 추출
            grep -E "(error|Error|FAILURE|BUILD FAILED)" build_output.txt | head -20 >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            # 컴파일 에러 상세 정보 추출
            echo "COMPILE_ERRORS<<EOF" >> $GITHUB_ENV
            grep -A 5 -B 5 "error:" build_output.txt | head -30 >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            exit 1
          }
          
          echo "빌드 성공! 빌드 결과물 확인 중..."

      - name: 빌드 결과물 확인
        id: check-artifacts
        run: |
          if [ ! -f "build/libs/"*.jar ]; then
            echo "ARTIFACT_CHECK_FAILED=true" >> $GITHUB_ENV
            echo "ARTIFACT_ERROR=JAR 파일이 생성되지 않았습니다!" >> $GITHUB_ENV
            exit 1
          fi
          
          # JAR 파일 정보 수집
          JAR_FILE=$(ls build/libs/*.jar | head -1)
          JAR_SIZE=$(ls -lh "$JAR_FILE" | awk '{print $5}')
          echo "JAR_FILE_NAME=$(basename "$JAR_FILE")" >> $GITHUB_ENV
          echo "JAR_FILE_SIZE=$JAR_SIZE" >> $GITHUB_ENV
          
          echo "JAR 파일 생성 확인: $(basename "$JAR_FILE") (크기: $JAR_SIZE)"

      - name: 빌드 성공 댓글 작성
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jarFileName = process.env.JAR_FILE_NAME;
            const jarFileSize = process.env.JAR_FILE_SIZE;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **스프링부트 프로젝트 빌드 성공**

              애플리케이션 빌드 성공!

              **빌드 결과:**
              - JAR 파일: \`${jarFileName}\`
              - 파일 크기: ${jarFileSize}
              - 빌드 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}
              
              모든 테스트가 성공적으로 완료되었습니다! 👍`
            })

      - name: 컴파일 에러 댓글 작성
        if: failure() && env.BUILD_FAILED == 'true' && env.COMPILE_ERRORS != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const compileErrors = process.env.COMPILE_ERRORS;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **스프링부트 프로젝트 빌드 실패 - 컴파일 에러**

              소스코드 컴파일 중 오류 발생

              **컴파일 에러 상세:**
              \`\`\`
              ${compileErrors}
              \`\`\`

              [빌드 로그 확인하기](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            })

      - name: 일반 빌드 실패 댓글 작성
        if: failure() && env.BUILD_FAILED == 'true' && env.COMPILE_ERRORS == ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const buildOutput = process.env.BUILD_OUTPUT;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **스프링부트 프로젝트 빌드 실패**

              빌드 프로세스 중 오류가 발생했습니다

              **빌드 에러:**
              \`\`\`
              ${buildOutput}
              \`\`\`
            
              [빌드 로그 확인하기](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            })

      - name: 빌드 결과물 확인 실패 댓글 작성
        if: failure() && env.ARTIFACT_CHECK_FAILED == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifactError = process.env.ARTIFACT_ERROR;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **빌드 결과물 확인 실패**

              📦 빌드는 완료되었지만 결과물 생성에 문제가 있습니다.

              **오류:**
              ${artifactError}

              **해결 방법:**
              1. \`build.gradle\`의 JAR 생성 설정을 확인하세요
              2. 빌드 스크립트의 출력 경로를 확인하세요
              3. 메인 클래스 설정을 확인하세요`
            })

      - name: 기타 빌드 실패 댓글 작성
        if: failure() && env.BUILD_FAILED != 'true' && env.ARTIFACT_CHECK_FAILED != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 실패한 단계 찾기
            let failedStep = '알 수 없는 단계';
            
            if ('${{ steps.checkout.outcome }}' === 'failure') failedStep = '소스코드 체크아웃';
            else if ('${{ steps.setup-java.outcome }}' === 'failure') failedStep = 'Java 환경 설정';
            else if ('${{ steps.setup-gradle.outcome }}' === 'failure') failedStep = 'Gradle 권한 설정';
            else if ('${{ steps.create-config.outcome }}' === 'failure') failedStep = '환경 설정 파일 생성';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **스프링부트 프로젝트 빌드 실패**

              ⚙️ **실패한 단계:** ${failedStep}

              **해결 방법:**
              1. GitHub Actions 로그를 상세히 확인하세요
              2. 환경 설정 및 시크릿 값들을 확인하세요
              3. 워크플로우 권한을 확인하세요

              [빌드 로그 확인하기](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            })
